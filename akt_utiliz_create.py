from akti_utiliz import Akti_utiliz
import tkinter as tk
from tkinter import messagebox, ttk
import xlsxwriter
import io
import sql as bd
import os
import tempfile
import webbrowser
import streamlit as st
from datetime import datetime



class Akti_utiliz_create:

    MONTH = ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"]
    MES = {
        "12": "–≥—Ä—É–¥–Ω—è",
        "01": "—Å—ñ—á–Ω—è",
        "02": "–ª—é—Ç–æ–≥–æ",
        "03": "–±–µ—Ä–µ–∑–Ω—è",
        "04": "–∫–≤—ñ—Ç–Ω—è",
        "05": "—Ç—Ä–∞–≤–Ω—è",
        "06": "—á–µ—Ä–≤–Ω—è",
        "07": "–ª–∏–ø–Ω—è",
        "08": "—Å–µ—Ä–ø–Ω—è",
        "09": "–≤–µ—Ä–µ—Å–Ω—è",
        "10": "–∂–æ–≤—Ç–Ω—è",
        "11": "–ª–∏—Å—Ç–æ–ø–∞–¥–∞",
    }
   

    

    
        
    def __init__(self, _predpr = "–¢–û–í '–ê–î–ú'", _month = "11", _year = "2024"):
        self._predpr = _predpr
        self._month = _month
        self._year = _year
        self.book = None
        self.s = None
        self.a = Akti_utiliz(_predpr, _month, _year)
        self.filtered = [item for item in self.a.grizuni_vsego() if any(v != 0 for v in list(item.values())[0])]
       

    def create_excel(self):
        """–°–æ–∑–¥–∞—ë—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Excel-—Ñ–∞–π–ª –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤"""
        if not self.filtered:
            return False
        output = io.BytesIO()
        self.book = xlsxwriter.Workbook(output)
        for i in self.filtered:
            self.s = self.book.add_worksheet(f"{int(list(i.keys())[0])}.{self._month}")
            self.s.set_column(0, 27, 2.6)  # —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 30 –∫–æ–ª–æ–Ω–æ–∫
            self.s.fit_to_pages(1, 1)
            self.s.set_portrait()
            self.s.set_margins(left=0.1, right=0.1, top=0.1, bottom=0.1)
            self.heder(i)

            # self.umovni_poznach()
     
        self.book.close()
        output.seek(0)
        return output.getvalue()
    
    
        
    def heder(self, date_grizuni):
        format_1 = self.book.add_format(
                    {
                        "border": 2,
                        "font_name": "Arial",
                        "font_size": 16,
                        "bold": True,
                        "fg_color": "#D7E4BC",
                        "align": "center",
                        "valign": "vcenter",
                        "text_wrap": True,
                        "shrink": True,
                    }
                )

        format_2 = self.book.add_format(
                    {
                        
                        "font_name": "Arial",
                        "font_size": 10,
                        "border": 2,
                        "fg_color": "#D7E4BC",
                        "align": "center",
                        "valign": "vcenter",
                        "text_wrap": True,
                        "shrink": True,
                    }
                )
        
        format_3 = self.book.add_format({
                'bold': False,
                'align': 'center',
                'valign': 'vcenter',
                'font_name': 'Calibri',
                'font_size': 12
            })
        
        format_4 = self.book.add_format({
                "border": 2,
                'bold': False,
                'align': 'center',
                'valign': 'vcenter',
                'font_name': 'Calibri',
                'font_size': 12,
                'text_wrap': True
            })

        log = self.s.insert_image(
            0, 0, "–ª–æ–≥–æ—Ç–∏–ø —É–∫—Ä.png", {"x_scale": 0.25, "y_scale": 0.25}
        )
        text = "67725 –û–¥–µ—Å—å–∫–∞ –æ–±–ª. –ë—ñ–ª–≥–æ—Ä–æ–¥ - –î–Ω—ñ—Å—Ç—Ä–æ–≤—Å—å–∫–∏–π —Ä-–Ω. —Å. –°–∞–ª–≥–∞–Ω–∏, –≤—É–ª. –ü—Ä–∏–º–æ—Ä—Å—å–∫–∞, 57-–ê,  —Ç–µ–ª (04849) 99-2-99¬ª\n" \
        "73025  –•–µ—Ä—Å–æ–Ω—Å—å–∫–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏—Ü—Ç–≤–æ: –º. –•–µ—Ä—Å–æ–Ω, –≤—É–ª. –í–æ—Ä–æ–Ω—Ü–æ–≤—Å—å–∫–∞ (–ö–æ–º—É–Ω–∞—Ä—ñ–≤), 27, –æ—Ñ—ñ—Å 5, —Ç–µ–ª (0552)392-492\n" \
        "www.Dez-Eltor.com.ua, Email: Dez.eltor@gmail.com"

        self.s.merge_range(0, 0, 5, 4, log, format_1)
        self.s.merge_range(0, 5, 5, 28, "–ü–†–ò–í–ê–¢–ù–ï –ü–Ü–î–ü–†–ò–Ñ–ú–°–¢–í–û \n ¬´–î–ï–ó-–ï–õ–¨–¢–û–†¬ª", format_1)
        self.s.merge_range(6, 0, 8, 28, text, format_2 )
        self.s.merge_range(13, 0, 13, 28, f"–ê–ö–¢ –£–¢–ò–õ–Ü–ó–ê–¶–Ü–á –ì–†–ò–ó–£–ù–Ü–í ‚Ññ {int(list(date_grizuni.keys())[0])}/{self._month}",
            self.book.add_format({
                'bold': True,
                'align': 'center',
                'valign': 'vcenter',
                'font_name': 'Calibri',
                'font_size': 14
            })
        )

        self.s.merge_range(15, 0, 15, 28, f" –≤—ñ–¥ {int(list(date_grizuni.keys())[0])} {self.MES[self._month]} {self._year} —Ä–æ–∫—É", format_3)
        self.s.merge_range(17, 0, 17, 28, f"–ù–∞–∑–≤–∞ –æ–±'—î–∫—Ç—É: {self._predpr}",format_3)
        self.s.merge_range(19, 2, 22, 8, "–í–ò–î –®–ö–Ü–î–ù–ò–ö–ê",format_4)
        self.s.merge_range(19, 9, 22, 17, "–ö–Ü–õ–¨–ö–Ü–°–¢–¨ (—à—Ç.)",format_4)
        self.s.merge_range(19, 18, 22, 27, "–°–ü–û–°–Ü–ë –£–¢–ò–õ–Ü–ó–ê–¶–Ü–á",format_4)
        def danie_v_tabl(vid_griz, kilkist, z, po):
            text = f"–ó–≥—ñ–¥–Ω–æ –¥–æ–≥–æ–≤–æ—Ä—É ‚Ññ 2435-–£\n"\
            "–∑ –ø—ñ–¥—Ä—è–¥–Ω–æ—é –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—î—é" 
            self.s.merge_range(z, 2, po, 8, vid_griz,format_4)
            self.s.merge_range(z, 9, po, 17, kilkist,format_4)
            self.s.merge_range(z, 18, po, 27, text,format_4)

        misi = list(date_grizuni.values())[0][0]
        krisi = list(date_grizuni.values())[0][1]
        row_start = 23
        row_finish = 25
        for i in (("–ü–ê–¶–Æ–ö", krisi), ("–ú–ò–®–ê", misi)):
            if i[1] > 0:
                danie_v_tabl(i[0], i[1], row_start, row_finish)
                row_start += 3
                row_finish += 3
        self.s.merge_range(row_finish+6, 2, row_finish+6, 10, "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∞ –æ—Å–æ–±–∞")
        self.s.insert_image(
             row_finish, 12, "–ü–ï–ß–ê–¢–¨-–ü–û–î–ü–ò–°–¨_png-removebg-preview.png", {"x_scale": 0.20, "y_scale": 0.21}
        )


    def main(self):
            
        if not self.create_excel():
            st.warning("üì≠ –î–∞–Ω–∏—Ö –¥–ª—è –∑–≤—ñ—Ç—É –Ω–µ–º–∞—î.")
            return
        
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ session_state
        if "show_form_akt" not in st.session_state:
            st.session_state["show_form_akt"] = False

        if "last_month" not in st.session_state:
            st.session_state["last_month"] = None

        if "last_year" not in st.session_state:
            st.session_state["last_year"] = None

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è/—Å–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã
        if st.button("üìù –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ê–ö–¢–£ –£–¢–ò–õ–Ü–ó–ê–¶–Ü–á"):
            st.session_state["show_form_akt"] = not st.session_state["show_form_zvit"]

        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è
        if st.session_state["show_form_akt"]:
            current_year = datetime.today().year
                
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
            
                
            st.download_button(
                label="üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ Excel",
                data=Akti_utiliz_create(self._predpr, self._month, self._year).create_excel(),
                file_name=f"–ê–∫—Ç —É—Ç–∏–ª—ñ–∑–∞—Ü—ñ—ó_{self._predpr}_{self._month}_{self._year}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
            st.session_state["show_form_akt"] = not st.session_state["show_form_akt"]
            


            
                
    
    # def create_file(self):
            

    #     # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel-—Ñ–∞–π–ª
    #     excel_data = self.create_excel()

    #     # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    #     filename = f"–ê–∫—Ç_—É—Ç–∏–ª—ñ–∑–∞—Ü—ñ—ó_{self._predpr}_{self._month}_{self._year}.xlsx"
    #     filename = filename.replace(" ", "_")  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏

    #     # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ temp
    #     temp_dir = tempfile.gettempdir()
    #     file_path = os.path.join(temp_dir, filename)

    #     # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
    #     with open(file_path, "wb") as f:
    #         f.write(excel_data)

    #     # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
    #     webbrowser.open(file_path)


if __name__ == "__main__":
    Akti_utiliz_create().create_file()