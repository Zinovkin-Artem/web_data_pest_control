import streamlit as st
import os
import hashlib
from pathlib import Path

def show_page_4(_predpr):

    # === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ MD5-—Ö–µ—à–∞ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏ ===
    def generate_key(name):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–ª—é—á –Ω–∞ –æ—Å–Ω–æ–≤–µ MD5-—Ö–µ—à–∞ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏"""
        return hashlib.md5(name.encode("utf-8", "surrogateescape")).hexdigest()

    # === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø—É—Ç–∏ ===
    def list_directory(path):
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–∫–∏ –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤"""
        folders = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è –ø–∞–ø–æ–∫
        files = []    # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ñ–∞–π–ª–æ–≤
        try:
            for item in Path(path).iterdir():  # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                if item.is_dir():  
                    folders.append(item.name)  # –ï—Å–ª–∏ —ç—Ç–æ –ø–∞–ø–∫–∞ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫
                else:
                    files.append(item.name)  # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º: {e}")  # –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        
        return sorted(folders, key=str.casefold), sorted(files, key=str.casefold)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏

    # === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞ ===
    def show_file_browser(base_url, root_folder):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ñ–∞–π–ª–æ–≤—ã–π –±—Ä–∞—É–∑–µ—Ä —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–∞–ø–æ–∫ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–∞–ø–æ–∫
        if "opened_folders" not in st.session_state:
            st.session_state["opened_folders"] = {}

        # –í–ª–æ–∂–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤
        def display_folder(path, relative_path=""):
            """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–∞–ø–∫–∏ –∏ —Ñ–∞–π–ª—ã"""
            folders, files = list_directory(path)  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤
            
            
            # === –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞–ø–æ–∫ ===
            for folder in folders:
                folder_key = generate_key(f"{relative_path}/{folder}")  # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–∞–ø–∫–∏
                is_open = st.session_state["opened_folders"].get(folder_key, False)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã—Ç–∞ –ª–∏ –ø–∞–ø–∫–∞

                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–∞–ø–∫–∏
                if st.button(f"üìÇ {folder}", key=folder_key):
                    st.session_state["opened_folders"][folder_key] = not is_open  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–ø–∫–∏
                    
                # –ï—Å–ª–∏ –ø–∞–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                if st.session_state["opened_folders"].get(folder_key, False):
                    display_folder(Path(path) / folder, relative_path=os.path.join(relative_path, folder))
            
            # === –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ ===
            for file in files:
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
                file_safe = file.encode("utf-8", "surrogateescape").decode("utf-8", "surrogateescape")

                # –§–æ—Ä–º–∏—Ä—É–µ–º URL-–∞–¥—Ä–µ—Å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
                file_url = f"{base_url}/{_predpr}/{relative_path}/{file_safe}".replace("//", "/")
                file_url = file_url.replace("https:/", "https://")  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–≤–æ–π–Ω–æ–π —Å–ª–µ—à –≤ URL
                
                # –ï—Å–ª–∏ —Ñ–∞–π–ª PDF, —Å–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
                if file.lower().endswith(".pdf"):
                    st.markdown(f'<a href="{file_url}" target="_blank">üìÑ {file_safe}</a>', unsafe_allow_html=True)
                
        
        display_folder(root_folder)  # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏

    # === –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit ===
    st.title("üìÇ –§–∞–π–ª–æ–≤—ã–π –ë—Ä–∞—É–∑–µ—Ä —á–µ—Ä–µ–∑ HTTPS")

    # –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    base_url = "https://app.dez-eltor.com.ua/files"

    # –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    root_folder = f"/home/ftpuser/doki_streamlit/{_predpr}"

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –±—Ä–∞—É–∑–µ—Ä
    show_file_browser(base_url, root_folder)








    # def generate_key(name):
    #     """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–ª—é—á –Ω–∞ –æ—Å–Ω–æ–≤–µ MD5-—Ö–µ—à–∞ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏"""
    #     return hashlib.md5(name.encode("utf-8", "ignore")).hexdigest()

    # def list_directory(path):
    #     folders = []
    #     files = []
    #     try:
    #         for item in os.listdir(path):
    #             full_path = os.path.join(path, item)
    #             if os.path.isdir(full_path):
    #                 folders.append(item)
    #             else:
    #                 files.append(item)
    #     except Exception as e:
    #         st.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º: {e}")
    #     return folders, files

    # def show_file_browser(base_url, root_folder):
    #     if "opened_folders" not in st.session_state:
    #         st.session_state["opened_folders"] = {}

    #     def display_folder(path, relative_path=""):
    #         folders, files = list_directory(path)
            
    #         for folder in folders:
    #             folder_key = generate_key(f"{relative_path}/{folder}")
    #             if st.button(f"üìÇ {folder}", key=folder_key):
    #                 st.session_state["opened_folders"][folder_key] = not st.session_state["opened_folders"].get(folder_key, False)
                
    #             if st.session_state["opened_folders"].get(folder_key, False):
    #                 display_folder(os.path.join(path, folder), relative_path=f"{relative_path}/{folder}")
            
    #         for file in files:
    #             file_url = f"{base_url}/{relative_path}/{file}".replace("//", "/")
    #             file_url = file_url.replace("https:/", "https://")  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–≤–æ–π–Ω–æ–π –¥–æ–º–µ–Ω
    #             if file.lower().endswith(".pdf"):
    #                 st.markdown(f'<a href="{file_url}" target="_blank">üìÑ {file}</a>', unsafe_allow_html=True)
    #             else:
    #                 st.download_button(label=f"üìÑ {file}", data="", file_name=file, key=file_url)
        
    #     display_folder(root_folder)

    # st.title("–§–∞–π–ª–æ–≤—ã–π –ë—Ä–∞—É–∑–µ—Ä —á–µ—Ä–µ–∑ HTTPS")

    # base_url = "https://app.dez-eltor.com.ua/files"
    # root_folder = "/home/ftpuser/doki_streamlit"

    # show_file_browser(base_url, root_folder)








