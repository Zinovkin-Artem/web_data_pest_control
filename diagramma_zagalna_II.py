import streamlit as st
import matplotlib.pyplot as plt
import numpy as np
import sql
import openai  # –î–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤ –ò–ò
from datetime import datetime

# –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = openai.OpenAI(api_key="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")

def diagramma(_pred):
    data = sql.diagr_tretiy_how_mishi(_pred)

    months = sorted([i[0] for i in data], key=lambda date: datetime.strptime(date, "%m.%Y"))

    st.markdown("<h3 style='text-align: center;'>–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ–∞–ø–∞–∑–æ–Ω –¥–∞—Ç:</h3>", unsafe_allow_html=True)

    selected_range = st.select_slider(
        "–í–∏–±–µ—Ä—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω", 
        options=months, 
        value=("07.2023", months[-1]), 
        label_visibility="collapsed"
    )

    start_idx = months.index(selected_range[0])
    end_idx = months.index(selected_range[1]) + 1
    filtered_data = [entry for entry in data if entry[0] in months[start_idx:end_idx]]

    labels = [entry[0] for entry in filtered_data]
    values1 = [entry[1] for entry in filtered_data]  # –ü–æ–µ–¥–∞–Ω–∏–µ –ø—Ä–∏–º–∞–Ω–∫–∏ (%)
    values2 = [entry[2] for entry in filtered_data]  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—ã–∑—É–Ω–æ–≤ (—à—Ç)

    fig, ax = plt.subplots(figsize=(12, 6))
    x = np.arange(len(labels))
    width = 0.4

    bars1 = ax.bar(x - width/2, values1, width=width, label="–ü–æ–µ–¥–∞–Ω–∏–µ –ø—Ä–∏–º–∞–Ω–∫–∏ (%)", color='blue', alpha=0.7)
    ax.bar_label(bars1, padding=3, fontsize=10, color='black')

    bars2 = ax.bar(x + width/2, values2, width=width, label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—ã–∑—É–Ω–æ–≤ (—à—Ç)", color='orange', alpha=0.7)
    ax.bar_label(bars2, padding=3, fontsize=10, color='black')

    ax.set_xticks(x)
    ax.set_xticklabels(labels, rotation=45)
    ax.set_ylabel("–ó–Ω–∞—á–µ–Ω–Ω—è")
    ax.set_title("–ü–û–†–Ü–í–ù–Ø–õ–¨–ù–ê –î–Ü–ê–ì–†–ê–ú–ú–ê –ê–ö–¢–ò–í–ù–û–°–¢–Ü –ì–†–ò–ó–£–ù–Ü–í")
    ax.legend()

    st.pyplot(fig)

    # –ö–ù–û–ü–ö–ê –ê–ù–ê–õ–ò–ó–ê –û–¢ –ò–ò
    if st.button("–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑"):
        prompt = f"""
        –£ –Ω–∞—Å –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ø—É–ª—è—Ü–∏–∏ –≥—Ä—ã–∑—É–Ω–æ–≤ –∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ –ø—Ä–∏–º–∞–Ω–∫–∏ –∑–∞ —Ä–∞–∑–Ω—ã–µ –º–µ—Å—è—Ü—ã.
        –î–∞–Ω–Ω—ã–µ:
        {[(l, v1, v2) for l, v1, v2 in zip(labels, values1, values2)]}
        
        - –ü–æ–µ–¥–∞–Ω–∏–µ –ø—Ä–∏–º–∞–Ω–∫–∏ –≤—ã—Ä–∞–∂–µ–Ω–æ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö.
        - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—ã–∑—É–Ω–æ–≤ —É–∫–∞–∑–∞–Ω–æ –≤ —à—Ç—É–∫–∞—Ö.

        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π:
        1. –ö–∞–∫ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≥—Ä—ã–∑—É–Ω–æ–≤?
        2. –ï—Å—Ç—å –ª–∏ —Å–µ–∑–æ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã?
        3. –ö–∞–∫ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø—Ä–∏–º–∞–Ω–∫–∏ —Å–≤—è–∑–∞–Ω–æ —Å —á–∏—Å–ª–æ–º –≥—Ä—ã–∑—É–Ω–æ–≤?
        4. –ö–∞–∫–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Å—è—Ü—ã?
        """

        try:
            response = client.chat.completions.create(
                model="gpt-4",
                messages=[{"role": "user", "content": prompt}]
            )

            st.markdown("### üìä –ê–Ω–∞–ª–∏–∑ –∏ –ø—Ä–æ–≥–Ω–æ–∑ –æ—Ç –ò–ò:")
            st.write(response.choices[0].message.content)

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ò–ò: {e}")

if __name__ == "__main__":
    diagramma("–¢–û–í '–ê–î–ú'")
