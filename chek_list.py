import streamlit as st
import pandas as pd
from st_aggrid import AgGrid, GridOptionsBuilder
from PestControl import sql_bd_copy
from datetime import datetime
from danie_krugovaya_III import krugovaya_diagr

def check_range(number, range_str):
    range_str = range_str.replace(',', ' ')  # ‚úÖ –ó–∞–º–µ–Ω—è–µ–º –í–°–ï –∑–∞–ø—è—Ç—ã–µ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
    ranges = range_str.split()  # ‚úÖ –¢–µ–ø–µ—Ä—å —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º

    for r in ranges:
        if '-' in r:
            start, end = map(int, r.split('-'))  # ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–∑–±–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
            if start <= number <= end:
                return True
        else:
            if int(r) == number:
                return True
    return False

def list_dk(_str: str):
    _str = _str.replace(',', ' ')
    
    _str = _str.split()
   
    _list = []
    for i in _str:
        if "-" in i:
            a, b = map(int, i.split("-"))
            _list.extend(range(a, b + 1))
        else:
            _list.append(int(i))
   
    return _list

def chek_list(_date, year,  predpr, dk_z_po, barier):
    if barier in  "I - II":
        _barier = "I - II"
        _dates, _month, _data_dict = sql_bd_copy.value_from_db_for_cheklist(_date, year, _barier, predpr)

    elif barier == "III":
        _barier = "III"
        _dates, _month, _data_dict = sql_bd_copy.value_from_db_for_cheklist(_date, year, _barier, predpr)
    
        

    
    _podpis_danix = sql_bd_copy.podpis_danix(predpr)
    
    dates = _dates
    month = str(*_month)
    data_dicts = _data_dict
    
    
    number_nugnix_dk = list_dk(dk_z_po)
    container_ids = sorted(
        (i for i in set().union(*[d.keys() for d in data_dicts]) if int(i) in number_nugnix_dk), key=int
    )
    
    columns = ['–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä'] + [f"{day}.{month}" for day in dates]
    table_data = {col: [] for col in columns}
    tooltip_data = {col: [] for col in columns}
    
    container_comment_data = []
    for container in container_ids:
        container_comment = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        for range_str, comment, color, _ in _podpis_danix:
            if check_range(int(container), range_str):
                container_comment = comment
                break
        container_comment_data.append(f"{container} - {container_comment}")
    
    table_data['–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä'] = container_comment_data
    for i, date in enumerate(dates):
        col_name = f"{date}.{month}"
        for container in container_ids:
           
            
            if container in data_dicts[i]:
                value, tooltip = data_dicts[i][container]
                table_data[col_name].append(value)
                tooltip_data[col_name].append(tooltip)
            else:
                table_data[col_name].append("")
                tooltip_data[col_name].append("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    df = pd.DataFrame(table_data)
    
    
    filter_data = st.radio("–í–∏–±–µ—Ä—ñ—Ç—å —Ñ—ñ–ª—å—Ç—Ä", ["–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å–µ", "–¢—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ñ", "–ù–î", "–Ü–ù"],key=f"{barier}", horizontal=True, label_visibility="collapsed")
   
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if filter_data == "–¢—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ñ":
        df = df[df.iloc[:, 1:].apply(
            lambda row: any(pd.to_numeric(row, errors='coerce').fillna(0) > 0) or
                        any(row.astype(str).str.contains(r'[MK–ú–ö]', na=False)), 
            axis=1
        )]
        


    elif filter_data == "–ù–î":
        df = df[df.iloc[:, 1:].apply(lambda row: any(row.astype(str) == "–ù–î"), axis=1)]

    elif filter_data == "–Ü–ù":
        df = df[df.iloc[:, 1:].apply(lambda row: any(row.astype(str) == "–Ü–ù"), axis=1)]

    
    for col in df.columns:
        if col != '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä':
            tooltips = tooltip_data[col]
            if len(tooltips) != len(df):
                tooltips = tooltips[:len(df)] if len(tooltips) > len(df) else tooltips + [""] * (len(df) - len(tooltips))
            df[f"tooltip_{col}"] = tooltips
    
    gb = GridOptionsBuilder.from_dataframe(df)
    gb.configure_column('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä', tooltipField="tooltip_–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä", flex= 1)
    
    for col in df.columns:
        if col != '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä':
            gb.configure_column(col, tooltipField=f"tooltip_{col}", width=100)
    
    for col in df.columns:
        if col.startswith('tooltip_'):
            gb.configure_column(col, hide=True)
    
    grid_options = gb.build()
    
    AgGrid(df, gridOptions=grid_options, height=400, width='80%', allow_unsafe_jscode=True)

    

def main(_barier, _predpr, z_po):
    # state_key = f"showform_{_barier}"  # ‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    # # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã (–æ—Ç–¥–µ–ª—å–Ω–æ–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ _barier)
    # if state_key not in st.session_state:
    #     st.session_state[state_key] = False

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
    # if st.button(f"üìù –î–∏–≤–∏—Ç–∏—Å—è —á–µ–∫_–ª–∏—Å—Ç {_barier} –±–∞—Ä'—î—Ä", key=f"download_chek_list_{_barier}"):
    #     st.session_state[state_key] = not st.session_state[state_key]  # ‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ _barier

    # # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ –∞–∫—Ç–∏–≤–Ω–∞, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
    # if st.session_state[state_key]:  # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_year = datetime.today().year
    current_month = datetime.today().strftime("%m")  # –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –≤ —Ñ–æ—Ä–º–∞—Ç–µ "01", "02" –∏ —Ç.–¥.
    st.header(f"–ß–µ–∫-–ª–∏—Å—Ç {_barier} –±–∞—Ä'—î—Ä")
    # –í—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∏–π)
    monse = st.selectbox(
        "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—è—Ü—å", 
        ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"], 
        index=int(current_month) - 1,  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        key=f"pokaz_chek_mons_{_barier}"  # ‚úÖ –†–∞–∑–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    )

    # –í—ã–±–æ—Ä –≥–æ–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∏–π)
    year = st.number_input(
        "–û–±–µ—Ä—ñ—Ç—å —Ä—ñ–∫", 
        min_value=2000, 
        max_value=2100, 
        value=current_year, 
        step=1, 
        key=f"pokaz_chek_year_{_barier}"  # ‚úÖ –†–∞–∑–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    )

    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
    chek_list(monse, year, barier=_barier, predpr=_predpr, dk_z_po=z_po)
    if _barier == "III":
        krugovaya_diagr(_predpr, monse, year)


